package com.paule.kitprod_api.model;

import org.springframework.data.annotation.Id;
import org.springframework.data.annotation.Transient;
import org.springframework.data.mongodb.core.mapping.Document;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;

@Document(collection = "exploitation")
public class Exploitation {

    @Transient public static final String SEQUENCE_NAME = "exploitations_sequence";

    @Id private String id;

    private String name;
    private int poultryCount;
    private ArrayList<Employee> employees;
    private ArrayList<Building> buildings;
    private ArrayList<Charge> charges;
    private ArrayList<FixedTask> fixedTasks;
    private ArrayList<Food> foods;


    public Exploitation() {
    }

    public Exploitation(String name, int poultryCount, ArrayList<Employee> employees, ArrayList<Building> buildings, ArrayList<Charge> charges, ArrayList<FixedTask> fixedTasks, ArrayList<Food> foods) {
        this.name = name;
        this.poultryCount = poultryCount;
        this.employees = employees;
        this.buildings = buildings;
        this.charges = charges;
        this.fixedTasks = fixedTasks;
        this.foods = foods;
    }

    public void addCharge (Charge charge) {
        if (this.charges == null) {
            this.charges = new ArrayList<>();
        }
        this.charges.add(charge);
    }

    public void addRawMaterial(String idFood, RawMaterial rawMaterial){
        Predicate<Food> byId = food -> food.getId() == idFood;
        List<Food> foodById = this.foods.stream().filter(byId).collect(Collectors.toList());

        if (!foodById.isEmpty()){
            Food food = foodById.get(0);

            food.addRawMaterial(rawMaterial);
        }
    }

    public  void addLot(String idBuilding, Lot lot){
        Predicate<Building> byId = building -> building.getId() == idBuilding;
        List<Building> buildingById = this.buildings.stream().filter(byId).collect(Collectors.toList());

        if (!buildingById.isEmpty()){
            Building building = buildingById.get(0);

            building.addLot(lot);
        }
    }

    public  void addLotSheet(String idBuilding, String idLot, LotSheet lotSheet){
        Predicate<Building> byId = building -> building.getId() == idBuilding;
        List<Building> buildingById = this.buildings.stream().filter(byId).collect(Collectors.toList());

        if (!buildingById.isEmpty()){
            Building building = buildingById.get(0);
            List<Lot> lots = building.getLots();
            Predicate<Lot> lbyId = lot-> lot.getId() == idLot;
            List<Lot> lotById = lots.stream().filter(lbyId).collect(Collectors.toList());

            if(!lotById.isEmpty()){
                Lot lot = lotById.get(0);

                lot.addLotSheet(lotSheet);
            }
        }
    }

    public void addBuilding (Building building) {
        if (this.buildings == null) {
            this.buildings = new ArrayList<>();
        }
        this.buildings.add(building);
    }

    public void addEmployee(Employee employee) {
        if (this.employees == null) {
            this.employees = new ArrayList<>();
        }
        this.employees.add(employee);
    }

    public void addFood(Food food) {
        if (this.foods == null) {
            this.foods = new ArrayList<>();
        }
        this.foods.add(food);
    }

    public void addFixedTask(FixedTask fixedTask) {
        if (this.fixedTasks == null) {
            this.fixedTasks = new ArrayList<>();
        }
        this.fixedTasks.add(fixedTask);
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getPoultryCount() {
        return poultryCount;
    }

    public void setPoultryCount(int poultryCount) {
        this.poultryCount = poultryCount;
    }

    public List<Employee> getEmployees() {
        if (employees == null) {
            return Collections.EMPTY_LIST;
        }
        return employees;
    }

    public void setEmployees(ArrayList<Employee> employees) {
        this.employees = employees;
    }

    public List<Building> getBuildings() {
        if (buildings == null) {
            return Collections.EMPTY_LIST;
        }
        return buildings;
    }

    public void setBuildings(ArrayList<Building> buildings) {
        this.buildings = buildings;
    }

    public List<Charge> getCharges() {
        if (charges == null) {
            return Collections.EMPTY_LIST;
        }
        return charges;
    }

    public void setCharges(ArrayList<Charge> charges) {
        this.charges = charges;
    }

    public List<FixedTask> getFixedTasks() {
        if (fixedTasks == null) {
            return Collections.EMPTY_LIST;
        }
        return fixedTasks;
    }

    public void setFixedTasks(ArrayList<FixedTask> fixedTasks) {
        this.fixedTasks = fixedTasks;
    }

    public List<Food> getFoods() {
        if (foods == null) {
            return Collections.EMPTY_LIST;
        }
        return foods;
    }

    public void setFoods(ArrayList<Food> foods) {
        this.foods = foods;
    }
}