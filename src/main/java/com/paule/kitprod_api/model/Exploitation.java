package com.paule.kitprod_api.model;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import java.util.Collections;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;

@Document(collection = "exploitation")
public class Exploitation {

    @Id
    private String id;

    private String name;
    private int numberOfPoultry;
    private List<Employee> employees;
    private List<Building> buildings;
    private List<Charge> charges;
    private List<Food> foods;
    private String idUser;

    public String getIdUser() {
        return idUser;
    }

    public void setIdUser(String idUser) {
        this.idUser = idUser;
    }

    public Exploitation() {
    }

    public Exploitation(String name, int numberOfPoultry, List<Employee> employees, List<Building> buildings,
            List<Charge> charges, List<Food> foods, String idUser) {
        this.name = name;
        this.numberOfPoultry = numberOfPoultry;
        this.employees = employees;
        this.buildings = buildings;
        this.charges = charges;
        this.foods = foods;
        this.idUser = idUser;
    }

    public void addCharge(Charge charge) {
        if (this.charges == null) {
            this.charges = new ArrayList<>();
        }
        this.charges.add(charge);
    }

    public void addRawMaterial(String idFood, RawMaterial rawMaterial) {
        Predicate<Food> byId = food -> food.getId().equals(idFood);
        List<Food> foodById = this.foods.stream().filter(byId).collect(Collectors.toList());

        if (!foodById.isEmpty()) {
            Food food = foodById.get(0);

            food.addRawMaterial(rawMaterial);
        }
    }

    public void addLot(String idBuilding, Lot lot) {
        Predicate<Building> byId = building -> building.getId().equals(idBuilding);
        List<Building> buildingById = this.buildings.stream().filter(byId).collect(Collectors.toList());

        if (!buildingById.isEmpty()) {

            Building building = buildingById.get(0);

            building.addLot(lot);
        }
    }

    public void addLotSheet(String idBuilding, String idLot, LotSheet lotSheet) {
        Predicate<Building> byId = building -> building.getId().equals(idBuilding);
        List<Building> buildingById = this.buildings.stream().filter(byId).collect(Collectors.toList());

        if (!buildingById.isEmpty()) {
            Building building = buildingById.get(0);
            List<Lot> lots = building.getLots();
            Predicate<Lot> lbyId = lot -> lot.getId().equals(idLot);
            List<Lot> lotById = lots.stream().filter(lbyId).collect(Collectors.toList());

            if (!lotById.isEmpty()) {
                Lot lot = lotById.get(0);

                lot.addLotSheet(lotSheet);
            }
        }
    }

    public void addFixedTask(String idBuilding, String idLot, FixedTask fixedTask) {
        Predicate<Building> byId = building -> building.getId().equals(idBuilding);
        List<Building> buildingById = this.buildings.stream().filter(byId).collect(Collectors.toList());

        if (!buildingById.isEmpty()) {
            Building building = buildingById.get(0);
            List<Lot> lots = building.getLots();
            Predicate<Lot> lbyId = lot -> lot.getId().equals(idLot);
            List<Lot> lotById = lots.stream().filter(lbyId).collect(Collectors.toList());

            if (!lotById.isEmpty()) {
                Lot lot = lotById.get(0);

                lot.addFixedTask(fixedTask);
            }
        }
    }

    public void addBuilding(Building building) {
        if (this.buildings == null) {
            this.buildings = new ArrayList<>();
        }
        this.buildings.add(building);
    }

    public void addEmployee(Employee employee) {
        if (this.employees == null) {
            this.employees = new ArrayList<>();
        }
        this.employees.add(employee);
    }

    public boolean removeEmployee(String idEmployee) {
        return this.employees.removeIf(employee -> employee.getId().equals(idEmployee));
    }

    public void addFood(Food food) {
        if (this.foods == null) {
            this.foods = new ArrayList<>();
        }
        this.foods.add(food);
    }

    public boolean removeFood(String idFood) {
        return this.foods.removeIf(food -> food.getId().equals(idFood));
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getNumberOfPoultry() {
        return numberOfPoultry;
    }

    public void setNumberOfPoultry(int numberOfPoultry) {
        this.numberOfPoultry = numberOfPoultry;
    }

    public List<Employee> getEmployees() {
        if (employees == null) {
            return Collections.emptyList();
        }
        return employees;
    }

    public void setEmployees(List<Employee> employees) {
        this.employees = employees;
    }

    public List<Building> getBuildings() {
        if (buildings == null) {
            return Collections.emptyList();
        }
        return buildings;
    }

    public void setBuildings(List<Building> buildings) {
        this.buildings = buildings;
    }

    public List<Charge> getCharges() {
        if (charges == null) {
            return Collections.emptyList();
        }
        return charges;
    }

    public void setCharges(List<Charge> charges) {
        this.charges = charges;
    }

    public List<Food> getFoods() {
        if (foods == null) {
            return Collections.emptyList();
        }
        return foods;
    }

    public void setFoods(List<Food> foods) {
        this.foods = foods;
    }
}